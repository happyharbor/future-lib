plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'io.happyharbor'
version '0.0.1'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'generic-library'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'generic-library'
                description = 'Generic one size fit all Library'
                url = 'https://github.com/happyharbor/generic-lib'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'trixobird'
                        name = 'Giorgos Trichopoulos'
                        email = 'george.trichopoulos@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/happyharbor/generic-lib.git'
                    developerConnection = 'scm:git:git://github.com/happyharbor/generic-lib.git'
                    url = 'https://github.com/happyharbor/generic-lib'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    String signingKey = project.property('signing.armored-key')
    String signingPassword = project.property('signing.password')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}